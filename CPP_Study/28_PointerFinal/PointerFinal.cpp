#include<iostream>
using namespace std;

// 오늘의 주제 : 포인터 마무리

// 1) 포인터 vs 배열 2탄
// 2) 주의사항 (마음가짐?)
// 포인터와 참조 처럼 주소를 다룰때는 정말로 그 주소가 끝까지 유효한지를 항상 생각하는 습관을 가져야함.
// 어지간 해서는 스택에다가 스택과 관련된 데이터의 주소를 밖으로 넘겨주는 행동은 당연히 조심해야함.

int& TestRef()
{
	int a = 1;
	return a;
}
int* TestPointer()
{
	int a = 1;
	return &a;
}

void TestWrong(int* ptr)
{
	int a[100] = {};
	a[99] = 0xAAAAAAAA;
	*ptr = 0x12341234;
}

int main()
{
	// 주소를 담는 바구니

	// 진퉁은 저~ 멀리 어딘가에 있음
	// p는 단지 그 곳으로 워프하는 포탈
	int* p;

	// 진짜배기! 원조 데이터
	// 닭장처럼 데이터의 묶음 (엄청 많고 거대함.
	int arr[10] = { 1,2,3,4,5,6,7,8 };

	// 그런데 상당히 많은 사람들이 [배열= 포인터]라 착각하는 경향이 있음!

	// -[배열의 이름]은 배열의 시작 주소값을 가리키는 TYPE* 포인터로 변환가능!
	p = arr;
	// -[TYPE형 1차원 배열]과 [TYPE*형 포인터]는 완전히 호환이 된다.
	cout << p[0] << endl;
	cout << arr[0] << endl;
	cout << p[5] << endl;
	cout << arr[5] << endl;
	cout << *p << endl;//p[0]
	cout << *arr << endl;//arr[0]
	cout << *(p + 3) << endl;
	cout << *(arr + 3) << endl;

	//[1][2][3][4]
	// 지옥을 보여드리겠습니다. (2차원 배열 vs 다중 포인터)
	int arr2[2][2] = { {1,2},{3,4} };

	// 결론 : 2차원 배열과 포인터는 전혀 호환이 되지 않는다.


	// 주소1 [1][2][3][4]
	// pp[ 주소1 ]
	//int* pp = arr2;

	//TYPE name[개수]
	// 
	//[ 1 ] [ 2 ]  ---int()[2] : int가 2개 짜리인 배열이 있다.
	//[	주소 ]
	int(*p2)[2] = arr2;// 배열을 사용할때는 오른쪽으로 별를 찍는게 아니라 () 사이에 넣는다.
	cout << (*p2)[0] << endl;// 1
	cout << (*p2)[1] << endl;// 2
	cout << (*(p2 + 1))[0] << endl;//3
	cout << (*(p2 + 1))[1] << endl;//4

	cout << p2[0][0] << endl;
	cout << p2[0][1] << endl;
	cout << p2[1][0] << endl;
	cout << p2[1][1] << endl;

	// C++은 알게 모르게 메모리를 오염시켜서  이상하게 작동하게 되게되는 순간.. 큰 문제가 난다.
	// 원인을 찾을 수 가 없음.

	// [매개변수][RET][지역변수] [매개변수][RET][지역변수(a)]
	int* pointer = TestPointer();// 메모리가 유효하지 않다는것은 엄밀히 말해서는 아니고
	// 스택 프레임 관리를 할때, 커서가 가리키는 위치를 벗어난것일뿐
	*pointer = 123;// 이렇게 아무런 문제가 되지 않는다.
	// 엉뚱한 메모리를 건드림에도 불구하고, 크래시가 안난다 ...-> c++의 무서운점.

	TestWrong(pointer);

	return 0;
}
